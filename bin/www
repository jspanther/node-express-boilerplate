#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require("../app");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  // named pipe
  if (isNaN(port)) return val;
  // port number
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  //  syscall (interface between an application and the Linux kernel)
  //  Throw error if the system call is not in listen state
  if (error.syscall !== "listen") {
    console.log("✘ Application failed to start");
    console.error("✘", error.message);
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES": // Acess Denied
      console.error("✘ Application failed to start");
      console.error("✘ " + bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE": // Port already in use
      console.error("✘ Application failed to start");
      console.error("✘ Port/Pipe " + bind + "  is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("✔ Application Started on " + bind);
}
